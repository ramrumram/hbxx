// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import AVFoundation;
@import UIKit;
@import CoreMedia;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class AVCaptureSession;
@class UIImage;
@class NSError;
@class AVCaptureFileOutput;
@class UIGestureRecognizer;

/**
  Class for handling iDevices custom camera usage
*/
SWIFT_CLASS("_TtC13CameraManager13CameraManager")
@interface CameraManager : NSObject <AVCaptureFileOutputRecordingDelegate, UIGestureRecognizerDelegate>
/**
  Capture session to customize camera settings.
*/
@property (nonatomic, strong) AVCaptureSession * _Nullable captureSession;
/**
  Property to determine if the manager should show the error for the user. If you want to show the errors yourself set this to false. If you want to add custom error UI set showErrorBlock property. Default value is false.
*/
@property (nonatomic) BOOL showErrorsToUsers;
/**
  Property to determine if the manager should show the camera permission popup immediatly when it’s needed or you want to show it manually. Default value is true. Be carful cause using the camera requires permission, if you set this value to false and don’t ask manually you won’t be able to use the camera.
*/
@property (nonatomic) BOOL showAccessPermissionPopupAutomatically;
/**
  A block creating UI to present error message to the user. This can be customised to be presented on the Window root view controller, or to pass in the viewController which will present the UIAlertController, for example.
*/
@property (nonatomic, copy) void (^ _Nonnull showErrorBlock)(NSString * _Nonnull, NSString * _Nonnull);
/**
  Property to determine if manager should write the resources to the phone library. Default value is true.
*/
@property (nonatomic) BOOL writeFilesToPhoneLibrary;
/**
  Property to determine if manager should follow device orientation. Default value is true.
*/
@property (nonatomic) BOOL shouldRespondToOrientationChanges;
/**
  The Bool property to determine if the camera is ready to use.
*/
@property (nonatomic, readonly) BOOL cameraIsReady;
/**
  The Bool property to determine if current device has front camera.
*/
@property (nonatomic) BOOL hasFrontCamera;
/**
  The Bool property to determine if current device has flash.
*/
@property (nonatomic) BOOL hasFlash;
/**
  Property to check video recording duration when in progress
*/
@property (nonatomic, readonly) CMTime recordedDuration;
/**
  Property to check video recording file size when in progress
*/
@property (nonatomic, readonly) int64_t recordedFileSize;
/**
  Asks the user for camera permissions. Only works if the permissions are not yet determined. Note that it’ll also automaticaly ask about the microphone permissions if you selected VideoWithMic output.
  :param: completion Completion block with the result of permission request
*/
- (void)askUserForCameraPermission:(void (^ _Nonnull)(BOOL))completion;
/**
  Stops running capture session but all setup devices, inputs and outputs stay for further reuse.
*/
- (void)stopCaptureSession;
/**
  Resumes capture session.
*/
- (void)resumeCaptureSession;
/**
  Stops running capture session and removes all setup devices, inputs and outputs.
*/
- (void)stopAndRemoveCaptureSession;
/**
  Captures still image from currently running capture session.
  :param: imageCompletion Completion block containing the captured UIImage
*/
- (void)capturePictureWithCompletion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))imageCompletion;
/**
  Captures still image from currently running capture session.
  :param: imageCompletion Completion block containing the captured imageData
*/
- (void)capturePictureDataWithCompletion:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))imageCompletion;
/**
  Starts recording a video with or without voice as in the session preset.
*/
- (void)startRecordingVideo;
/**
  Stop recording a video. Save it to the cameraRoll and give back the url.
*/
- (void)stopVideoRecording:(void (^ _Nullable)(NSURL * _Nullable, NSError * _Nullable))completion;
- (void)captureOutput:(AVCaptureFileOutput * _Null_unspecified)captureOutput didStartRecordingToOutputFileAtURL:(NSURL * _Null_unspecified)fileURL fromConnections:(NSArray * _Null_unspecified)connections;
- (void)captureOutput:(AVCaptureFileOutput * _Null_unspecified)captureOutput didFinishRecordingToOutputFileAtURL:(NSURL * _Null_unspecified)outputFileURL fromConnections:(NSArray * _Null_unspecified)connections error:(NSError * _Null_unspecified)error;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
